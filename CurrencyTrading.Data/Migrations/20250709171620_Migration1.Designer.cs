// <auto-generated />
using CurrencyTrading.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurrencyTrading.Data.Migrations
{
    [DbContext(typeof(CurrencyTradingContext))]
    [Migration("20250709171620_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CurrencyTrading.Data.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "USD",
                            Country = "United States",
                            Name = "US Dollar"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "EUR",
                            Country = "European Union",
                            Name = "Euro"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "GBP",
                            Country = "United Kingdom",
                            Name = "British Pound"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "JPY",
                            Country = "Japan",
                            Name = "Japanese Yen"
                        });
                });

            modelBuilder.Entity("CurrencyTrading.Data.Models.CurrencyPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseCurrencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("QuoteCurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("QuoteCurrencyId");

                    b.ToTable("CurrencyPairs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseCurrencyId = 1,
                            MaxValue = 0.8700m,
                            MinValue = 0.8200m,
                            QuoteCurrencyId = 2
                        },
                        new
                        {
                            Id = 2,
                            BaseCurrencyId = 1,
                            MaxValue = 0.8100m,
                            MinValue = 0.7500m,
                            QuoteCurrencyId = 3
                        },
                        new
                        {
                            Id = 3,
                            BaseCurrencyId = 1,
                            MaxValue = 155.00m,
                            MinValue = 145.00m,
                            QuoteCurrencyId = 4
                        });
                });

            modelBuilder.Entity("CurrencyTrading.Data.Models.CurrencyPair", b =>
                {
                    b.HasOne("CurrencyTrading.Data.Models.Currency", "BaseCurrency")
                        .WithMany("BaseCurrencyPairs")
                        .HasForeignKey("BaseCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CurrencyTrading.Data.Models.Currency", "QuoteCurrency")
                        .WithMany("QuoteCurrencyPairs")
                        .HasForeignKey("QuoteCurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseCurrency");

                    b.Navigation("QuoteCurrency");
                });

            modelBuilder.Entity("CurrencyTrading.Data.Models.Currency", b =>
                {
                    b.Navigation("BaseCurrencyPairs");

                    b.Navigation("QuoteCurrencyPairs");
                });
#pragma warning restore 612, 618
        }
    }
}
